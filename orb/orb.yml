version: 2.1
description: Secret-injector orb

orbs:
  cci-common: bestsellerit/cci-common@3.6.1

executors:
  secret_image:
    docker:
      - image: europe-docker.pkg.dev/artifacts-pub-prod-b57f/public-docker/harpocrates-ci:$HARPOCRATES_VERSION

jobs:
  dump-secrets:
    description: Read secret from Vault and write to /secrets/secrets
    executor: secret_image
    parameters:
      vault-path:
        type: string
        default: ""
        description: Secret path to read from Vault
      output:
        type: string
        default: "/tmp"
        description: Path in the workspace to store the secrets
      output-filename:
        type: string
        default: "secrets"
        description: Name of the secret file that will be generated. Without extension.
      format:
        type: enum
        default: "env"
        enum: ["env", "json", "secret"]
        description: Type of output you want to store the secrets as (will not change the file extension)
      short:
        type: string
        default: ""
        description: Vault account prefix to pull, will default to an environment var called SHORT
      prefix:
        type: string
        default: ""
        description: Prefix to be used for secrets
      append:
        type: boolean
        default: true
        description: Append, appends secrets to a file, defaults to true
      vault-oidc:
        type: boolean
        default: false
        description: Login to vault using oidc
      uppercase:
        type: boolean
        default: false
        description: Convert all secret keys to uppercase, only when `vault-path` is set
      custom_steps:
        type: steps
        default: []
        description: Custom steps that will be executed right after code checkout and attach_workspace - https://circleci.com/docs/reusing-config/#steps
    steps:
      - attach_workspace:
          at: /tmp
      - when:
          condition: << parameters.custom_steps >>
          steps:
            - steps: << parameters.custom_steps >>
      - when:
          condition: << parameters.vault-oidc >>
          steps:
            - vault_login_oidc
      - unless:
          condition: << parameters.vault-oidc >>
          steps:
            - vault-login
      - run:
          name: Secret-injector - Write secrets to file
          command: |
            mkdir -p << parameters.output >>
            if [ "<< parameters.short >>" != "" ] ; then
              export SHORT="<< parameters.short >>"
            fi

            # This is the default one, if no vault-path is defined
            if [ "<< parameters.vault-path >>" == "" ] ; then

              # Fetch all the "common" secrets if that env var has been set
              if [ "$HARPOCRATES_SECRETS" != "" ] ; then
                prefix=""
                if [ "<< parameters.prefix >>" == "" ] ; then
                  prefix="K8S_CLUSTER_"
                else
                  prefix="<< parameters.prefix >>"
                fi
                /harpocrates \
                  --format "<< parameters.format >>" \
                  --output "<< parameters.output >>" \
                  --append=<< parameters.append >> \
                  --prefix $prefix \
                  --secret $HARPOCRATES_SECRETS
              fi

              # Fetch cluster credentials
              if [ "$CLUSTER_SECRET" != "" ] ; then
                export HARPOCRATES_FILENAME="cluster_secret.json"
                /harpocrates \
                  --format json \
                  --output "<< parameters.output >>" \
                  --append=<< parameters.append >> \
                  --secret "$CLUSTER_SECRET"
                unset HARPOCRATES_FILENAME
              fi

            fi

            # Check if they have specified vault-path and then fetch those from Vault
            if [ "<< parameters.vault-path >>" != "" ] ; then
              if [ "<< parameters.output-filename >>" != "" ] ; then
                export HARPOCRATES_FILENAME="<< parameters.output-filename >>"
              fi

              /harpocrates \
                --format "<< parameters.format >>" \
                --output "<< parameters.output >>" \
                --append=<< parameters.append >> \
                --prefix "<< parameters.prefix >>" \
                --uppercase=<< parameters.uppercase >> \
                --secret "<< parameters.vault-path >>"
            fi

      - persist_to_workspace:
          root: << parameters.output >>
          paths:
            - secrets
            - << parameters.output-filename >>
            - cluster_secret.json

  dump-secrets-yaml:
    description: >
      Read secret from Vault, and write to designated output file.
      This utilises an yaml template file to determine the secrets being fetched.
      Compared to dump-secrets this can fetch multiple secrets at once.
      The structure of the yaml file is shown here. https://github.com/BESTSELLER/harpocrates/blob/master/examples/secret.yaml
    executor: secret_image
    parameters:
      secret-file:
        description: Path to your secret file
        type: string
      output:
        type: string
        default: "/tmp"
        description: Path in the workspace to store the secrets
      common-secrets:
        type: boolean
        default: true
        description: Should the orb fetch the secrets common to BESTSELLER.
      vault-oidc:
        type: boolean
        default: false
        description: Login to vault using oidc
      custom_steps:
        type: steps
        default: []
        description: Custom steps that will be executed right after code checkout and attach_workspace - https://circleci.com/docs/reusing-config/#steps

    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - when:
          condition: << parameters.custom_steps >>
          steps:
            - steps: << parameters.custom_steps >>
      - run:
          name: replace strings
          command: |
            envsubst < << parameters.secret-file >> > ./secrets_var.yaml && mv ./secrets_var.yaml << parameters.secret-file >>
      - when:
          condition: << parameters.vault-oidc >>
          steps:
            - vault_login_oidc
      - unless:
          condition: << parameters.vault-oidc >>
          steps:
            - vault-login
      - run:
          name: Secret-injector - Write secrets to file
          command: |
            # Exit script if you try to use an uninitialized variable.
            set -o nounset

            # Exit script if a statement returns a non-true return value.
            set -o errexit

            # Use the error status of the first failure, rather than that of the last item in a pipeline.
            set -o pipefail

            # Insert output path
            export OUTPUT=<< parameters.output >>
            yq e '.output = env(OUTPUT)' -i  << parameters.secret-file >>

            # Fetch common secrets
            if [  << parameters.common-secrets >> = true ] ; then

              # Update secret file with common secrets
              if [ "$HARPOCRATES_SECRETS" != "" ]; then
                IFS=',' read -ra SECRET_PATH \<<<"$HARPOCRATES_SECRETS"
                for i in "${SECRET_PATH[@]}"; do
                  export TMP_PATHS="$i"
                  yq e '.secrets += [ { env(TMP_PATHS): {"prefix": "K8S_CLUSTER_"}}]' -i  << parameters.secret-file >>
                done
              fi

              if [ "$CLUSTER_SECRET" != "" ] ; then
                yq e '.secrets += [ { env(CLUSTER_SECRET): {"format": "json", "fileName": "cluster_secret.json"}}]' -i << parameters.secret-file >>
              fi
            fi

            /harpocrates \
                -f << parameters.secret-file >>

      - persist_to_workspace:
          root: << parameters.output >>
          paths:
            - "*"

commands:
  use-secrets:
    description: Will add the secrets to BASH_ENV, defaults to /tmp/secrets
    parameters:
      file:
        type: string
        default: "/tmp/secrets"
        description: Filepath to source (defaults to /tmp/secrets)
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Secret-injector - Adding secrets to BASH_ENV
          command: cat "<< parameters.file >>" >> $BASH_ENV
  check_if_sudo:
    steps:
      - run:
          name: Check if current user as sudo permission
          command: |
            if command -v sudo >/dev/null 2>&1; then
              sudo -v >/dev/null 2>&1
              if [ $? == 0 ]; then
                echo 'export SUDO="sudo"' >> $BASH_ENV
              fi
            fi
  download_n_install_yq:
    steps:
      - run:
          name: Download & install yq
          command: |
            source $BASH_ENV || true

            VERSION=v4.44.3
            command -v yq >/dev/null 2>&1 || { $SUDO wget -O /usr/bin/yq https://github.com/mikefarah/yq/releases/download/$VERSION/yq_linux_amd64 && \
              $SUDO chmod +x /usr/bin/yq; }
  vault_install:
    steps:
      - run:
          name: Secret-injector - Vault install
          command: |
            source $BASH_ENV || true

            VERSION=1.18.1
            command -v vault >/dev/null 2>&1 || { $SUDO wget -O ./vault_$VERSION\_linux_amd64.zip https://releases.hashicorp.com/vault/$VERSION/vault_$VERSION\_linux_amd64.zip && \
              $SUDO unzip -o ./vault_$VERSION\_linux_amd64.zip -d /usr/bin/. && \
              $SUDO chmod +x /usr/bin/./vault
              $SUDO rm ./vault_$VERSION\_linux_amd64.zip; }

  vault-login:
    steps:
      - vault_install
      - run:
          name: Secret-injector - Vault login
          command: |
            source $BASH_ENV || true

            vault login -no-print -method=userpass username=$VAULT_USERNAME password=$VAULT_PASSWORD
            echo 'export VAULT_TOKEN=$(cat $HOME/.vault-token)' >> $BASH_ENV

  vault_login_oidc:
    description: Login in to Vault using OIDC
    parameters:
      gcp_cred_config_file_path:
        description: path for storing the generated credential file
        type: string
        default: /tmp/gcp_cred_config.json
      oidc_token_file_path:
        description: path of the circleci oidc token
        type: string
        default: /tmp/oidc_token.json
      service_account:
        description: service account to connect circleci with vault
        type: string
        default: $VAULT_ACCOUNT
      username:
        type: string
        default: $VAULT_USERNAME

    steps:
      - cci-common/install_gcloud
      - run:
          name: Generate credential configuration for CircleCI OIDC Token
          command: |
            echo $CIRCLE_OIDC_TOKEN > << parameters.oidc_token_file_path >>

            # Create a credential configuration for the generated OIDC ID Token
            gcloud iam workload-identity-pools create-cred-config \
              "projects/850054384889/locations/global/workloadIdentityPools/circleci/providers/circleci-oidc-prv"\
              --output-file="<< parameters.gcp_cred_config_file_path >>" \
              --service-account=<< parameters.service_account >> \
              --credential-source-file=<< parameters.oidc_token_file_path >>
      - run:
          name: Gcloud login using credential configuration
          command: |
            gcloud auth login --brief --cred-file "<< parameters.gcp_cred_config_file_path >>"

            echo "export GOOGLE_APPLICATION_CREDENTIALS='<< parameters.gcp_cred_config_file_path >>'" | tee -a $BASH_ENV
      - vault_install
      - run:
          name: Vault login
          command: |
            source ${BASH_ENV}

            vault login -no-print -method=gcp role=<< parameters.username >> service_account=<< parameters.service_account >>
            echo 'export VAULT_TOKEN=$(cat $HOME/.vault-token)' >> $BASH_ENV
  inject:
    description: Secret-injector orb
    parameters:
      app-name:
        description: Name of the deployment to inject secrets into
        type: string
      deploy-file:
        description: Path to your deployment file
        type: string
      secret-file:
        description: Path to your secret file
        type: string
      container-name:
        description: Name of the container to inject secrets into
        type: string
        default: ""
      deploy-type:
        type: enum
        default: "Deployment"
        enum: ["Deployment", "StatefulSet", "CronJob"]
      namespace:
        description: Namespace of the deploy-type
        type: string
        default: ""
      auth-name:
        description: Vault auth method
        type: string
        default: ""
      role-name:
        description: Vault role name, defaults to the value of auth-name
        type: string
        default: ""
      init-container:
        description: Whether to add the initContainer or not
        type: boolean
        default: true
      side-car:
        description: Whether to add the sideCar or not
        type: boolean
        default: false
      side-car-interval:
        description: Number of minutes between each fetch of secrets. 1m is the lowest value supported.
        type: string
        default: "5m"
      vault-oidc:
        type: boolean
        default: false
        description: Login to vault using oidc
    steps:
      - attach_workspace:
          at: /tmp
      - check_if_sudo
      - download_n_install_yq
      - when:
          condition: << parameters.vault-oidc >>
          steps:
            - vault_login_oidc
      - unless:
          condition: << parameters.vault-oidc >>
          steps:
            - vault-login
      - run:
          name: Secret-injector - kubectl kustomize
          command: |
            source ${BASH_ENV} || true
            source /tmp/secrets || true

            if [ -z "<< parameters.container-name >>" ]; then
                export CONTAINER_NAME=<< parameters.app-name >>
            else
                export CONTAINER_NAME=<< parameters.container-name >>
            fi

            if [ "<< parameters.namespace >>" != "" ]; then
              export NAMESPACE="<< parameters.namespace >>"
            else
              export NAMESPACE="default"
            fi

            if [ "<< parameters.auth-name >>" != "" ]; then
              export AUTH_NAME="<< parameters.auth-name >>"
            else
              export AUTH_NAME="$CLUSTER_NAME"
            fi

            if [ "<< parameters.role-name >>" != "" ]; then
              export ROLE_NAME="<< parameters.role-name >>"
            else
              export ROLE_NAME="$AUTH_NAME"
            fi

            export DEPLOYMENT_TYPE=<< parameters.deploy-type >>
            export DEPLOY_FILE=<< parameters.deploy-file >>
            export APP_NAME=<< parameters.app-name >>
            export SECRET_FILE=<< parameters.secret-file >>
            export SECRETS=$(yq -o=json $SECRET_FILE)

            # Validate the secrets file
            curl -s -H "Accept:application/vnd.github.v3.raw" -o harpocrates_$HARPOCRATES_VERSION\_linux_amd64.tar.gz -L https://github.com/BESTSELLER/harpocrates/releases/download/$HARPOCRATES_VERSION/harpocrates_$HARPOCRATES_VERSION\_linux_amd64.tar.gz
            tar -zxf harpocrates_$HARPOCRATES_VERSION\_linux_amd64.tar.gz

            ./harpocrates --validate=true -f $SECRET_FILE

            curl -s -H "Accept:application/vnd.github.v3.raw" -o kustomization.yml -L https://github.com/BESTSELLER/harpocrates/releases/download/$HARPOCRATES_VERSION/kustomization.yml

            if [ "<< parameters.side-car >>" == "true" ]; then
              export SIDECAR_INTERVAL="<< parameters.side-car-interval >>"
              curl -s -H "Accept:application/vnd.github.v3.raw" -o $DEPLOYMENT_TYPE-sidecar.yml -L https://github.com/BESTSELLER/harpocrates/releases/download/$HARPOCRATES_VERSION/$DEPLOYMENT_TYPE-sidecar.yml

              envsubst < ./$DEPLOYMENT_TYPE-sidecar.yml > ./$DEPLOYMENT_TYPE-sidecar_var.yml
              mv ./$DEPLOYMENT_TYPE-sidecar_var.yml ./$DEPLOYMENT_TYPE-sidecar.yml
            fi

            if [ "<< parameters.init-container >>" == "true" ]; then
              curl -s -H "Accept:application/vnd.github.v3.raw" -o $DEPLOYMENT_TYPE.yml -L https://github.com/BESTSELLER/harpocrates/releases/download/$HARPOCRATES_VERSION/$DEPLOYMENT_TYPE.yml

              envsubst < ./$DEPLOYMENT_TYPE.yml > ./$DEPLOYMENT_TYPE\_var.yml
              mv ./$DEPLOYMENT_TYPE\_var.yml ./$DEPLOYMENT_TYPE.yml
            fi


            # This will remove all the files that doesn't exists.
            MY_LIST=$(yq '.patchesStrategicMerge[]' kustomization.yml)
            while IFS= read -r line; do
              echo "... $line ..."
              if [ "$line" != "$DEPLOYMENT_TYPE.yml" ]; then
                yq -i 'del( .patchesStrategicMerge[] | select(. == "'"$line"'") )' kustomization.yml
              fi
            done \<<< "$MY_LIST"


            envsubst < ./kustomization.yml > ./kustomization_var.yml
            mv ./kustomization_var.yml ./kustomization.yml

            # workaround due to: https://github.com/kubernetes-sigs/kustomize/issues/4062
            KUBE_VERSION=$(kubectl version -o yaml | yq .clientVersion.minor)
            if [[ $KUBE_VERSION == 22 && $DEPLOYMENT_TYPE == "CronJob" ]]; then

              if [ ! -f "./kustomize" ]; then
                wget https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.5/kustomize_v4.5.5_linux_amd64.tar.gz
                tar -zxf kustomize_v4.5.5_linux_amd64.tar.gz
                chmod +x kustomize
              fi

              ./kustomize build > new.yml
            else
              kubectl kustomize . > new.yml
            fi

            mv new.yml $DEPLOY_FILE
