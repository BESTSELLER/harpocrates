version: 2.1
description: Secret-injector orb

executors:
  secret_image:
    docker:
      - image: harbor.bestsellerit.com/library/harpocrates:$HARPOCRATES_VERSION

jobs:
  dump-secrets:
    description: Read secret from Vault and write to /secrets/secrets
    executor: secret_image
    parameters:
      vault-path:
        type: string
        default: ""
        description: Secret path to read from Vault
      output:
        type: string
        default: "/tmp"
        description: Path in the workspace to store the secrets
      output-filename:
        type: string
        default: "secrets"
        description: Name of the secret file that will be generated. Without extension.
      format:
        type: enum
        default: "env"
        enum: ["env", "json", "secret"]
        description: Type of output you want to store the secrets as (will not change the file extension)
      short:
        type: string
        default: ""
        description: Vault account prefix to pull, will default to an environment var called SHORT
    steps:
      - attach_workspace:
          at: /tmp
      - vault-login
      - run:
          name: Secret-injector - Write secrets to file
          command: |
            mkdir -p << parameters.output >>
            if [ "<< parameters.short >>" != "" ] ; then
              export SHORT="<< parameters.short >>"
            fi

            # This is the default one, if no vault-path is defined
            if [ "<< parameters.vault-path >>" == "" ] ; then

              # Fetch all the "common" secrets if that env var has been set
              if [ "$HARPOCRATES_SECRETS" != "" ] ; then
                /harpocrates \
                  --format "<< parameters.format >>" \
                  --output "<< parameters.output >>" \
                  --prefix "K8S_CLUSTER_" \
                  --secret $HARPOCRATES_SECRETS
              fi

              # Fetch cluster credentials
              if [ "$CLUSTER_SECRET" != "" ] ; then
                export HARPOCRATES_FILENAME="cluster_secret.json"
                /harpocrates \
                  --format json \
                  --output "<< parameters.output >>" \
                  --secret "$CLUSTER_SECRET"
                unset HARPOCRATES_FILENAME
              fi

              # Fetch docker credentials
              if [ "$SHORT" != "" ] ; then
                /harpocrates \
                  --format "<< parameters.format >>" \
                  --output "<< parameters.output >>" \
                  --prefix "DOCKER_" \
                  --secret "ES/data/service_accounts/harbor/$SHORT-ci"
              fi

            fi

            # Check if they have specified vault-path and then fetch those from Vault
            if [ "<< parameters.vault-path >>" != "" ] ; then
              if [ "<< parameters.output-filename >>" != "" ] ; then
                export HARPOCRATES_FILENAME="<< parameters.output-filename >>"
              fi

              /harpocrates \
                --format "<< parameters.format >>" \
                --output "<< parameters.output >>" \
                --secret "<< parameters.vault-path >>"
            fi

      - persist_to_workspace:
          root: << parameters.output >>
          paths:
            - secrets
            - << parameters.output-filename >>
            - cluster_secret.json

commands:
  use-secrets:
    description: Will add the secrets to BASH_ENV, defaults to /tmp/secrets
    parameters:
      file:
        type: string
        default: "/tmp/secrets"
        description: Filepath to source (defaults to /tmp/secrets)
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Secret-injector - Adding secrets to BASH_ENV
          command: cat "<< parameters.file >>" >> $BASH_ENV; done
  vault-login:
    steps:
      - run:
          name: Secret-injector - Install Vault and login
          command: |
            VERSION=1.2.3
            wget -O ./vault_$VERSION\_linux_amd64.zip https://releases.hashicorp.com/vault/$VERSION/vault_$VERSION\_linux_amd64.zip
            unzip -o vault_$VERSION\_linux_amd64.zip
            chmod +x vault
            mv vault /usr/bin/.
            vault login -method=userpass username=$VAULT_USERNAME password=$VAULT_PASSWORD >/dev/null
            echo 'export VAULT_TOKEN=$(cat $HOME/.vault-token)' >> $BASH_ENV
  inject:
    description: Secret-injector orb
    parameters:
      app-name:
        description: Name of the deployment to inject secrets into
        type: string
      deploy-file:
        description: Path to your deployment file
        type: string
      secret-file:
        description: Path to your secret file
        type: string
      deploy-type:
        type: enum
        default: "Deployment"
        enum: ["Deployment", "StatefulSet", "CronJob"]
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Secret-injector - Download & install yq
          command: |
            VERSION=2.4.0
            wget -O /usr/bin/yq https://github.com/mikefarah/yq/releases/download/$VERSION/yq_linux_amd64
            chmod +x /usr/bin/yq
      - vault-login
      - run:
          name: Secret-injector - kubectl kustomize
          command: |
            if [ -f ${BASH_ENV} ]; then
              source ${BASH_ENV}
            fi

            if [ -f "/tmp/secrets.env" ]; then
              for f in /tmp/*.env; do source $f; done
            fi

            export DEPLOYMENT_TYPE=<< parameters.deploy-type >>
            export DEPLOY_FILE=<< parameters.deploy-file >>
            export APP_NAME=<< parameters.app-name >>
            export SECRET_FILE=<< parameters.secret-file >>
            export SECRETS=$(yq read $SECRET_FILE -j)

            curl -s -H "Accept:application/vnd.github.v3.raw" -o $DEPLOYMENT_TYPE.yml -L https://github.com/BESTSELLER/harpocrates/releases/download/$HARPOCRATES_VERSION/$DEPLOYMENT_TYPE.yml
            curl -s -H "Accept:application/vnd.github.v3.raw" -o kustomization.yml -L https://github.com/BESTSELLER/harpocrates/releases/download/$HARPOCRATES_VERSION/kustomization.yml

            envsubst < ./kustomization.yml > ./kustomization_var.yml
            mv ./kustomization_var.yml ./kustomization.yml

            envsubst < ./$DEPLOYMENT_TYPE.yml > ./$DEPLOYMENT_TYPE_var.yml
            mv ./$DEPLOYMENT_TYPE_var.yml ./$DEPLOYMENT_TYPE.yml

            kubectl kustomize . > new.yml
            mv new.yml $DEPLOY_FILE
