version: 2.1
description: Secret-injector orb

executors:
  secret_image:
    docker:
      - image: harbor.bestsellerit.com/library/harpocrates:$HARPOCRATES_VERSION

jobs:
  dump-secrets:
    description: Read secret from Vault and write to /secrets/secrets
    executor: secret_image
    parameters:
      vault-path:
        type: string
        default: ""
        description: Secret path to read from Vault
      output:
        type: string
        default: "/tmp"
        description: Path in the workspace to store the secrets
      output-filename:
        type: string
        default: "secrets"
        description: Name of the secret file that will be generated. Without extension.
      format:
        type: enum
        default: "env"
        enum: ["env", "json", "secret"]
        description: Type of output you want to store the secrets as (will not change the file extension)
      short:
        type: string
        default: ""
        description: Vault account prefix to pull, will default to an environment var called SHORT
      prefix:
        type: string
        default: ""
        description: Prefix to be used for secrets
    steps:
      - attach_workspace:
          at: /tmp
      - vault-login
      - run:
          name: Secret-injector - Write secrets to file
          command: |
            mkdir -p << parameters.output >>
            if [ "<< parameters.short >>" != "" ] ; then
              export SHORT="<< parameters.short >>"
            fi

            # This is the default one, if no vault-path is defined
            if [ "<< parameters.vault-path >>" == "" ] ; then

              # Fetch all the "common" secrets if that env var has been set
              if [ "$HARPOCRATES_SECRETS" != "" ] ; then
                prefix=""
                if [ "<< parameters.prefix >>" == "" ] ; then 
                  prefix="K8S_CLUSTER_"
                else
                  prefix="<< parameters.prefix >>"                 
                fi
                /harpocrates \
                  --format "<< parameters.format >>" \
                  --output "<< parameters.output >>" \
                  --prefix $prefix \
                  --secret $HARPOCRATES_SECRETS
              fi

              # Fetch cluster credentials
              if [ "$CLUSTER_SECRET" != "" ] ; then
                export HARPOCRATES_FILENAME="cluster_secret.json"
                /harpocrates \
                  --format json \
                  --output "<< parameters.output >>" \
                  --secret "$CLUSTER_SECRET"
                unset HARPOCRATES_FILENAME
              fi

              # Fetch docker credentials
              if [ "$SHORT" != "" ] ; then
                /harpocrates \
                  --format "<< parameters.format >>" \
                  --output "<< parameters.output >>" \
                  --prefix "DOCKER_" \
                  --secret "ES/data/service_accounts/harbor/$SHORT-ci"
              fi

            fi

            # Check if they have specified vault-path and then fetch those from Vault
            if [ "<< parameters.vault-path >>" != "" ] ; then
              if [ "<< parameters.output-filename >>" != "" ] ; then
                export HARPOCRATES_FILENAME="<< parameters.output-filename >>"
              fi

              /harpocrates \
                --format "<< parameters.format >>" \
                --output "<< parameters.output >>" \
                --prefix "<< parameters.prefix >>" \
                --secret "<< parameters.vault-path >>" 
            fi

      - persist_to_workspace:
          root: << parameters.output >>
          paths:
            - secrets
            - << parameters.output-filename >>
            - cluster_secret.json
            
  dump-secrets2:
    description: >
      Read secret from Vault, using a yml file and write to /secrets/secrets. 
      Compared to dump-secrets the following have been moved to the .yml file.
      vault-path, output-filename, format, short and prefix
    executor: secret_image
    parameters:
      secret_ci-path:
        type: string
        default: ./secret_ci.yml
        description: Path to file with secret information. Defaults to ./secret_ci.yml
      output:
        type: string
        default: "/tmp"
        description: Path in the workspace to store the secrets
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Dump-secrets - Download & install yq
          command: |
            VERSION=v4.23.1
            wget -O /usr/bin/yq https://github.com/mikefarah/yq/releases/download/$VERSION/yq_linux_amd64
            chmod +x /usr/bin/yq
      - vault-login
      - run:
          name: Secret-injector - Write secrets to file
          command: |
            # Exit script if you try to use an uninitialized variable.
            set -o nounset

            # Exit script if a statement returns a non-true return value.
            set -o errexit

            # Use the error status of the first failure, rather than that of the last item in a pipeline.
            set -o pipefail
            mkdir -p << parameters.output >>

            # Loop through the secret yaml
            readarray secrets < <(yq e -o=j -I=0 '.secrets[]' "<< parameters.secret_ci-path >>" )

            
            for sec in "${secrets[@]}"; do
              short=$(echo "$sec" | yq e '.short' -)
              vaultpath=$(echo "$sec" | yq e '.vault-path' -)
              prefix=$(echo "$sec" | yq e '.prefix // ""' -)
              format=$(echo "$sec" | yq e '.format // "env"' -)
              outputFilename=$(echo "$sec" | yq e '.output-filename // "secrets"' -)
              if [ "$short" != "null" ]; then
                export SHORT="$short"
              fi
              
              shopt -s extglob
              if [[ $format == @("env"|"json"|"secret") ]]; then
                  echo is valid
              else
                  echo not valid
                  exit 1
              fi
              name=$(echo "$sec" | yq e '.name' -)
              echo "Now going through $name"

              # Default one, if no vault-path is set
              if [ "$vaultpath" == "null" ]; then
                # Fetch all the common secrets
                if [ "$HARPOCRATES_SECRETS" != "" ]; then
                  pfix=""
                  if [ "$prefix" == "" ]; then
                    pfix="K8S_CLUSTER_"
                  else
                    pfix="$prefix"
                  fi
                  /harpocrates \
                    --format "$format" \
                    --output "<< parameters.output >>" \
                    --prefix "$pfix" \
                    --secret "$HARPOCRATES_SECRETS"
                fi
                # Fetch cluster credentials
                if [ "$CLUSTER_SECRET" != "" ]; then
                  export HARPOCRATES_FILENAME="cluster_secret.json"
                  /harpocrates \
                    --format json \
                    --output "<< parameters.output >>" \
                    --secret "$CLUSTER_SECRET"
                  unset HARPOCRATES_FILENAME
                fi

                # Fetch docker credentials
                if [ "$SHORT" != "" ]; then
                  /harpocrates \
                    --format "$format" \
                    --output "<< parameters.output >>" \
                    --prefix "DOCKER_" \
                    --secret "ES/data/service_accounts/harbor/$SHORT-ci"
                fi

              fi

              # Check if they have specified vault-path and then fetch those from Vault
              if [ "$vaultpath" != "null" ]; then
                if [ "$outputFilename" != "null" ]; then
                  export HARPOCRATES_FILENAME="$outputFilename"
                fi

                /harpocrates \
                  --format "$format" \
                  --output "<< parameters.output >>" \
                  --prefix "$prefix" \
                  --secret "$vaultpath"
              fi

            done

      - persist_to_workspace:
          root: << parameters.output >>
          paths:
            - secrets
            - '*'
            - cluster_secret.json

commands:
  use-secrets:
    description: Will add the secrets to BASH_ENV, defaults to /tmp/secrets
    parameters:
      file:
        type: string
        default: "/tmp/secrets"
        description: Filepath to source (defaults to /tmp/secrets)
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Secret-injector - Adding secrets to BASH_ENV
          command: cat "<< parameters.file >>" >> $BASH_ENV
  vault-login:
    steps:
      - run:
          name: Secret-injector - Install Vault and login
          command: |
            VERSION=1.6.3
            wget -O ./vault_$VERSION\_linux_amd64.zip https://releases.hashicorp.com/vault/$VERSION/vault_$VERSION\_linux_amd64.zip
            unzip -o vault_$VERSION\_linux_amd64.zip
            chmod +x vault
            mv vault /usr/bin/.
            vault login -method=userpass username=$VAULT_USERNAME password=$VAULT_PASSWORD >/dev/null
            echo 'export VAULT_TOKEN=$(cat $HOME/.vault-token)' >> $BASH_ENV
  inject:
    description: Secret-injector orb
    parameters:
      app-name:
        description: Name of the deployment to inject secrets into
        type: string
      deploy-file:
        description: Path to your deployment file
        type: string
      secret-file:
        description: Path to your secret file
        type: string
      container-name:
        description: Name of the container to inject secrets into
        type: string
        default: ""
      deploy-type:
        type: enum
        default: "Deployment"
        enum: ["Deployment", "StatefulSet", "CronJob"]
      namespace:
        description: Namespace of the deploy-type
        type: string
        default: ""
      auth-name:
        description: Vault auth method
        type: string
        default: ""
      role-name:
        description: Vault role name, defaults to the value of auth-name
        type: string
        default: ""
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Secret-injector - Download & install yq
          command: |
            VERSION=2.4.0
            wget -O /usr/bin/yq https://github.com/mikefarah/yq/releases/download/$VERSION/yq_linux_amd64
            chmod +x /usr/bin/yq
      - vault-login
      - run:
          name: Secret-injector - kubectl kustomize
          command: |
            if [ -f ${BASH_ENV} ]; then
              source ${BASH_ENV}
            fi

            if [ -f "/tmp/secrets" ]; then
              source /tmp/secrets
            fi

            if [ -z "<< parameters.container-name >>" ]; then
                export CONTAINER_NAME=<< parameters.app-name >>
            else
                export CONTAINER_NAME=<< parameters.container-name >>
            fi

            if [ "<< parameters.namespace >>" != "" ]; then
              export NAMESPACE="<< parameters.namespace >>"
            else
              export NAMESPACE="default"
            fi

            if [ "<< parameters.auth-name >>" != "" ]; then
              export AUTH_NAME="<< parameters.auth-name >>"
            else
              export AUTH_NAME="$CLUSTER_NAME"
            fi

            if [ "<< parameters.role-name >>" != "" ]; then
              export ROLE_NAME="<< parameters.role-name >>"
            else
              export ROLE_NAME="$AUTH_NAME"
            fi
        
            export DEPLOYMENT_TYPE=<< parameters.deploy-type >>
            export DEPLOY_FILE=<< parameters.deploy-file >>
            export APP_NAME=<< parameters.app-name >>
            export SECRET_FILE=<< parameters.secret-file >>
            export SECRETS=$(yq read $SECRET_FILE -j)

            curl -s -H "Accept:application/vnd.github.v3.raw" -o $DEPLOYMENT_TYPE.yml -L https://github.com/BESTSELLER/harpocrates/releases/download/$HARPOCRATES_VERSION/$DEPLOYMENT_TYPE.yml
            curl -s -H "Accept:application/vnd.github.v3.raw" -o kustomization.yml -L https://github.com/BESTSELLER/harpocrates/releases/download/$HARPOCRATES_VERSION/kustomization.yml

            envsubst < ./kustomization.yml > ./kustomization_var.yml
            mv ./kustomization_var.yml ./kustomization.yml

            envsubst < ./$DEPLOYMENT_TYPE.yml > ./$DEPLOYMENT_TYPE\_var.yml
            mv ./$DEPLOYMENT_TYPE\_var.yml ./$DEPLOYMENT_TYPE.yml

            kubectl kustomize . > new.yml
            mv new.yml $DEPLOY_FILE
