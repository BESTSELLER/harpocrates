version: 2.1
description: Secret-injector orb

executors:
  secret_image:
    docker:
      - image: circleci/circleci-cli:alpine


jobs:
  dump-secrets:
    description: Read secret from Vault and write to /secrets/secret.env
    executor: secret_image
    parameters:
      vault-path:
        type: string
        default: ""
        description: Secret path to read from Vault
      workspace-path:
        type: string
        default: "/tmp/secrets"
        description: Path in the workspace to store the secrets
      output-file-name:
        type: string
        default: "secrets"
        description: Name of the secret file that will be generated. Without extension.
      output-type:
        type: enum
        default: "env"
        enum: ["env", "json", "secret"]
        description: Type of output you want to store the secrets as
      short:
        type: string
        default: ""
        description: Vault account prefix to pull, will default to an environment var called SHORT
    steps:
      - vault-login
      - run:
          name: Secret-injector - Install jq
          command: |
            apk --no-cache add --upgrade jq
      - run:
          name: Secret-injector - Write secrets to file
          command: |
            mkdir -p << parameters.workspace-path >>

            if [ "<< parameters.short >>" != "" ] ; then
              export SHORT="<< parameters.short >>"
            fi

            if [ "<< parameters.vault-path >>" != "" ] ; then
              if [ "<< parameters.output-type >>" = "json" ] ; then
                echo "Type is set to 'json'"
                vault kv get -format=json -field=data << parameters.vault-path >> >> << parameters.workspace-path >>/<< parameters.output-file-name >>.json
              fi

              if [ "<< parameters.output-type >>" = "env" ] ; then
                echo "Type is set to 'env'"
                vault kv get -format=json << parameters.vault-path >> | jq -r ".data .data | to_entries | map({(\"export \" + .key):  (\"'\" + .value + \"'\" )}) | add | to_entries|map(\"\(.key)=\(.value|tostring)\") | .[]" >> << parameters.workspace-path >>/<< parameters.output-file-name >>.env
              fi

              if [ "<< parameters.output-type >>" = "secret" ] ; then
                echo "Type is set to 'secret'"
                vault kv get -format=json << parameters.vault-path >> | jq -r ".data .data | to_entries | map({(.key):  (.value)}) | add | to_entries|map(\"\(.key)=\(.value|tostring)\") | .[]" >> << parameters.workspace-path >>/<< parameters.output-file-name >>.secret
              fi
            fi

            if [ "$VAULT_COMMON_SECRETS" != "" ] ; then
              vault kv get -format=json $VAULT_COMMON_SECRETS | jq -r ".data .data | to_entries | map({(\"export K8S_CLUSTER_\" + .key):  (\"'\" + .value + \"'\" )}) | add | to_entries|map(\"\(.key)=\(.value|tostring)\") | .[]" >> << parameters.workspace-path >>/<< parameters.output-file-name >>.env
            fi
            if [ "$VAULT_CLUSTER_SECRETS" != "" ] ; then
              vault kv get -format=json $VAULT_CLUSTER_SECRETS | jq -r ".data .data | to_entries | map({(\"export K8S_CLUSTER_\" + .key):  (\"'\" + .value + \"'\" )}) | add | to_entries|map(\"\(.key)=\(.value|tostring)\") | .[]" >> << parameters.workspace-path >>/<< parameters.output-file-name >>.env
            fi
            if [ "$VAULT_CONTEXT_SECRETS" != "" ] ; then
              vault kv get -format=json $VAULT_CONTEXT_SECRETS | jq -r ".data .data | to_entries | map({(\"export K8S_CLUSTER_\" + .key):  (\"'\" + .value + \"'\" )}) | add | to_entries|map(\"\(.key)=\(.value|tostring)\") | .[]" >> << parameters.workspace-path >>/<< parameters.output-file-name >>.env
            fi
            if [ "$SHORT" != "" ] ; then
              vault kv get -format=json ES/service_accounts/harbor/$SHORT-ci | jq -r ".data .data | to_entries | map({(\"export DOCKER_\" + .key):  (\"'\" + .value + \"'\" )}) | add | to_entries|map(\"\(.key)=\(.value|tostring)\") | .[]" >> << parameters.workspace-path >>/<< parameters.output-file-name >>.env
            fi

      - persist_to_workspace:
          root: << parameters.workspace-path >>
          paths:
            - << parameters.output-file-name >>.*

commands:
  use-secrets:
    description: Will add the secrets to BASH_ENV
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Secret-injector - Adding secrets to BASH_ENV
          command: for f in /tmp/*.env; do cat $f >> $BASH_ENV; done
  vault-login:
    steps:
      - run:
          name: Secret-injector - Install Vault and login
          command: |
            VERSION=1.2.3
            wget -O ./vault_$VERSION\_linux_amd64.zip https://releases.hashicorp.com/vault/$VERSION/vault_$VERSION\_linux_amd64.zip
            unzip -o vault_$VERSION\_linux_amd64.zip
            chmod +x vault
            mv vault /usr/bin/.
            vault login -method=userpass username=$VAULT_USERNAME password=$VAULT_PASSWORD
  inject:
    description: Secret-injector orb
    parameters:
      app-name:
        description: Name of the deployment to inject secrets into
        type: string
      deploy-file:
        description: Path to your deployment file
        type: string
      secret-file:
        description: Path to your secret file
        type: string
      deploy-type:
        type: enum
        default: "Deployment"
        enum: ["Deployment", "StatefulSet", "CronJob"]
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Secret-injector - Download & install yq
          command: |
            VERSION=2.4.0
            wget -O /usr/bin/yq https://github.com/mikefarah/yq/releases/download/$VERSION/yq_linux_amd64
            chmod +x /usr/bin/yq
      - vault-login
      - run:
          name: Secret-injector - kubectl kustomize
          command: |
            if [ -f ${BASH_ENV} ]; then
              source ${BASH_ENV}
            fi
            
            if [ -f "/tmp/secrets.env" ]; then
              for f in /tmp/*.env; do source $f; done
            fi

            export DEPLOYMENT_TYPE=<< parameters.deploy-type >>
            export DEPLOY_FILE=<< parameters.deploy-file >>
            export APP_NAME=<< parameters.app-name >>
            export SECRET_FILE=<< parameters.secret-file >>
            export SECRETS=$(yq read $SECRET_FILE -j)

            curl -s -H "Accept:application/vnd.github.v3.raw" -o $DEPLOYMENT_TYPE.yml -L https://github.com/BESTSELLER/harpocrates/releases/download/$HARPOCRATES_VERSION/$DEPLOYMENT_TYPE.yml
            curl -s -H "Accept:application/vnd.github.v3.raw" -o kustomization.yml -L https://github.com/BESTSELLER/harpocrates/releases/download/$HARPOCRATES_VERSION/kustomization.yml

            envsubst < ./kustomization.yml > ./kustomization_var.yml
            mv ./kustomization_var.yml ./kustomization.yml

            envsubst < ./$DEPLOYMENT_TYPE.yml > ./$DEPLOYMENT_TYPE_var.yml
            mv ./$DEPLOYMENT_TYPE_var.yml ./$DEPLOYMENT_TYPE.yml

            kubectl kustomize . > new.yml
            mv new.yml $DEPLOY_FILE
