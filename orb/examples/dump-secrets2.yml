# secret_ci.yml
secret_template:
    # Each map specifices the different secrets you want fetched
  - name: "common"
  - name: "vault-policies"
    # Secret path to read from Vault
    vault-path: ES/data/vault-policies/prod
    # Prefix to be used for secrets
    short: "ES"
    # Vault account prefix to pull, will default to an environment var called SHORT
    prefix: "DOCKER"
    # Type of output you want to store the secrets as (will not change the file extension) only env, json or secret
    format: json
    # Name of the secret file that will be generated. Without extension
    output-filename: vaultpolicies
  - name: cloudrun
    vault-path: "gcp_landingzone/key/cloudrun-admin"
    output-filename: cloudrun_admin
    format: json

# .circleci/config.yml
version: 2.1

orbs:
  secret-injector: bestsellerit/secret-injector@dev:1.5.27-dev
jobs:
  deploy:
    docker:
      - image: 'google/cloud-sdk:alpine'
    steps:
      - checkout
      - run:
          command: >
            source /tmp/secrets

            if [ ${CIRCLE_BRANCH} == "master" ]

            then
              export DEPLOY_VERSION=''
              export SECRET_VERSION=prod
            else
              export DEPLOY_VERSION=-dev
              echo 'export DEPLOY_VERSION="-dev"' >> $BASH_ENV
              source ${BASH_ENV}
              export SECRET_VERSION=dev
            fi


            envsubst < ./secrets.yaml > ./secrets_var.yaml && mv
            ./secrets_var.yaml ./secrets.yaml

            envsubst < ./deployment.yml > ./deployment_var.yml && mv
            ./deployment_var.yml ./deployment.yml
          name: replace strings
      - secret-injector/inject:
          app-name: $CIRCLE_PROJECT_REPONAME$DEPLOY_VERSION
          deploy-file: ./deployment.yml
          secret-file: secrets.yaml
      - run:
          command: |
            kubectl apply -f ./deployment.yml
          name: create kubernetes service
workflows:
  prod:
    jobs:
      - secret-injector/dump-secrets2:
          secret_ci-path: ./secrets_ci.yaml
          context:
            - es02-prod
      - deploy