version: 2.1

executors:
  go_image:
    docker:
      - image: cimg/go:1.22.0
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASS

orbs:
  secret-injector: bestsellerit/secret-injector@2.7.0
  cci-common: bestsellerit/cci-common@2.2.1

jobs:
  build-go:
    executor: go_image
    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - run:
          name: go build - windows/amd64
          command: |
            CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o harpocrates.exe
            tar -czvf /tmp/harpocrates_$CIRCLE_TAG\_windows_amd64.tar.gz harpocrates.exe
            rm harpocrates.exe
      - run:
          name: go build - darwin/amd64
          command: |
            CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o harpocrates
            tar -czvf /tmp/harpocrates_$CIRCLE_TAG\_darwin_amd64.tar.gz harpocrates
            rm harpocrates
      - run:
          name: go build - linux/amd64
          command: |
            CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o harpocrates
            tar -czvf /tmp/harpocrates_$CIRCLE_TAG\_linux_amd64.tar.gz harpocrates
            mv harpocrates /tmp
      - persist_to_workspace:
          root: /tmp
          paths:
            - harpocrates*

  publish:
    executor: go_image
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - run:
          name: Install Vault and login
          command: |
            VERSION=1.6.1
            wget https://releases.hashicorp.com/vault/$VERSION/vault_$VERSION\_linux_amd64.zip
            sudo unzip -o vault_$VERSION\_linux_amd64.zip -d /usr/bin/
            sudo chmod +x /usr/bin/vault
            vault login -no-print -method=userpass username=$VAULT_USERNAME password=$VAULT_PASSWORD
      - run:
          name: Create release folder
          command: |
            mkdir releases
            cp /tmp/harpocrates_* ./releases
      - run:
          name: Update stuff with git tag
          command: |
            sed -i -e "s?\$HARPOCRATES_VERSION?$CIRCLE_TAG?g" orb/orb.yml
            sed -i -e "s?\$HARPOCRATES_VERSION?$CIRCLE_TAG?g" orb/CronJob.yml
            sed -i -e "s?\$HARPOCRATES_VERSION?$CIRCLE_TAG?g" orb/CronJob-sidecar.yml
            sed -i -e "s?\$HARPOCRATES_VERSION?$CIRCLE_TAG?g" orb/Deployment.yml
            sed -i -e "s?\$HARPOCRATES_VERSION?$CIRCLE_TAG?g" orb/Deployment-sidecar.yml
            sed -i -e "s?\$HARPOCRATES_VERSION?$CIRCLE_TAG?g" orb/StatefulSet.yml
            sed -i -e "s?\$HARPOCRATES_VERSION?$CIRCLE_TAG?g" orb/StatefulSet-sidecar.yml
            cp orb/CronJob.yml ./releases
            cp orb/CronJob-sidecar.yml ./releases
            cp orb/Deployment.yml ./releases
            cp orb/Deployment-sidecar.yml ./releases
            cp orb/StatefulSet.yml ./releases
            cp orb/StatefulSet-sidecar.yml ./releases
            cp orb/kustomization.yml ./releases
      - run:
          name: Download ghr
          command: |
            GHR_VERSION=v0.13.0
            wget -O ghr.tar.gz https://github.com/tcnksm/ghr/releases/download/$GHR_VERSION/ghr_$GHR_VERSION\_linux_386.tar.gz
            tar -xvzf ghr.tar.gz
            sudo mv ghr_$GHR_VERSION\_linux_386/ghr /usr/local/bin
      - run:
          name: Create Github releases
          command: |
            source $BASH_ENV || true
            source /tmp/secrets || true

            ghr -replace $CIRCLE_TAG ./releases
      - run:
          name: Publish CircleCI orb
          command: |
            source $BASH_ENV || true
            source /tmp/secrets || true

            CCI_VERSION=0.1.11540
            wget https://github.com/CircleCI-Public/circleci-cli/releases/download/v$CCI_VERSION/circleci-cli_$CCI_VERSION\_linux_amd64.tar.gz
            tar -xf circleci-cli_$CCI_VERSION\_linux_amd64.tar.gz
            mv circleci-cli_$CCI_VERSION\_linux_amd64 cli

            CC_NAMESPACE=bestsellerit
            ORB_PATH=./orb/orb.yml
            ORB_NAME=secret-injector

            if [[ $CIRCLE_TAG == *"dev"* ]]; then
              ./cli/circleci orb publish $ORB_PATH $CC_NAMESPACE/$ORB_NAME@dev:$CIRCLE_TAG
            else
              ./cli/circleci orb publish $ORB_PATH $CC_NAMESPACE/$ORB_NAME@$CIRCLE_TAG
            fi
  orb-validate:
    executor: go_image
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - run:
          name: Validate CircleCI orb
          command: |
            source $BASH_ENV || true
            source /tmp/secrets || true

            CCI_VERSION=0.1.22924
            wget https://github.com/CircleCI-Public/circleci-cli/releases/download/v$CCI_VERSION/circleci-cli_$CCI_VERSION\_linux_amd64.tar.gz
            tar -xf circleci-cli_$CCI_VERSION\_linux_amd64.tar.gz
            mv circleci-cli_$CCI_VERSION\_linux_amd64 cli

            ./cli/circleci orb validate ./orb/orb.yml

test_filter: &test_filter
  filters:
    tags:
      ignore: /.*/

release_filter: &release_filter
  filters:
    tags:
      only: /^[0-9]+(\.[0-9]+)*(-.*)*$/
    branches:
      ignore: /.*/

common_context: &common_context
  context:
    - es02-prod
    - shared

workflows:
  test:
    jobs:
      - secret-injector/dump-secrets:
          name: secrets-common
          vault-oidc: true
          <<: [*common_context, *test_filter]
      - cci-common/go_test_unit:
          go_version: "1.21.0"
          resource_class: xlarge
          requires:
            - secrets-common
          <<: [*common_context, *test_filter]
      - cci-common/go_test_sonar:
          go_version: "1.21.0"
          resource_class: xlarge
          requires:
            - secrets-common
          <<: [*common_context, *test_filter]
      - build-go:
          requires:
            - secrets-common
          <<: [*common_context, *test_filter]
      - cci-common/build_n_push_docker:
          name: docker-build
          repo: public-docker
          tag: $CIRCLE_SHA1
          dry_run: true
          requires:
            - secrets-common
          <<: [*common_context, *test_filter]
      - cci-common/build_n_push_docker:
          name: docker-build-ci
          image_name: $CIRCLE_PROJECT_REPONAME-ci
          repo: public-docker
          tag: $CIRCLE_SHA1
          dry_run: true
          file: Dockerfile.ci
          requires:
            - secrets-common
          <<: [*common_context, *test_filter]
      - orb-validate:
          requires:
            - secrets-common
          <<: [*common_context, *test_filter]

  test-build-release:
    jobs:
      - secret-injector/dump-secrets-yaml:
          secret-file: ci-secrets.yaml
          vault-oidc: true
          <<: [*common_context, *release_filter]
      - build-go:
          requires:
            - secret-injector/dump-secrets-yaml
          <<: [*common_context, *release_filter]
      - cci-common/build_n_push_docker:
          name: docker-build-n-push
          repo: public-docker
          tag: $CIRCLE_TAG
          push_latest: true
          requires:
            - build-go
          <<: [*common_context, *release_filter]
      - cci-common/build_n_push_docker:
          name: docker-build-n-push-ci
          image_name: $CIRCLE_PROJECT_REPONAME-ci
          repo: public-docker
          tag: $CIRCLE_TAG
          push_latest: true
          file: Dockerfile.ci
          requires:
            - build-go
          <<: [*common_context, *release_filter]
      - publish:
          requires:
            - docker-build-n-push
          <<: [*common_context, *release_filter]
