on:
  workflow_call:
    inputs:
      docker_build_args:
        type: string
        default: ""
        required: false
        description: A list of build arguments to pass to the docker build command. (e.g., MY_VARIABLE=myvalue)
      docker_build_contexts:
        type: string
        default: ""
        required: false
        description: "A list of build contexts to pass to the Docker build"
      docker_create_latest_tag:
        type: boolean
        default: false
        required: false
        description: "Determines if the Docker image tag `latest` should be created."
      docker_context:
        type: string
        default: "."
        description: Path to the build context
      docker_file_path:
        type: string
        default: ""
        required: false
        description: Path to a dockerfile
      docker_image_name:
        type: string
        default: ${{ github.event.repository.name }}
        description: Name of the docker image to build
      docker_target:
        type: string
        default: ""
        required: false
        description: "When building a Dockerfile with multiple build stages, use the --target option to specify an intermediate build stage by name as a final stage for the resulting image"
      docker_secrets:
        type: string
        default: ""
        required: false
        description: 'List of secrets to expose to the build (e.g., "key=string", "GIT_AUTH_TOKEN=mytoken")'
      docker_secret_envs:
        type: string
        default: ""
        required: false
        description: "List of secret env vars to expose to the build (e.g., key=envname, MY_SECRET=MY_ENV_VAR)"
      docker_image_push:
        type: boolean
        default: false
        required: false
        description: "Whether the docker image should be pushed or not."
      app_name:
        description: Name of the application to deploy. Will be used as chart name as well.
        type: string
        default: ${{ github.event.repository.name }}
      app_version:
        description: Version of the application to deploy. This will add an extra custom tag to the image before pushing.
        type: string
        default: ${{ github.sha }}
      chart_path:
        description: The path of the chart. (e.g. public-docker/chart)
        type: string
        default: public-docker/chart
      chart_version:
        type: string
        description: "The chart version to use"
        default: "0.15.2"
      values_file_path:
        description: Path for the Helm values file
        type: string
        default: ./values.yaml
      remote_values_file_path:
        description: "Path for the remote Helm values file that will be overwritten by the local values file (if any). For example: 'sales-and-invoicing/bff-values.yaml'. This can be modified from https://github.com/BESTSELLER/helm-values"
        type: string
        required: false
      enable_vulnerability_scan:
        type: boolean
        description: "To scan docker image with Trivy or not"
        default: false
      deploy:
        type: boolean
        description: Whether to deploy the application to Kubernetes or not
        default: false
        required: false
      environment:
        type: string
        required: true
        description: "GitHub environment to use"
      vault_secrets:
        type: string
        description: Paths to Vault secrets there is needed for the application to build and to deploy.
        required: false
      env_vars:
        type: string
        required: false
        description: "A list of key-values that will be transformed to environment variables. (e.g. DEPLOY_VERSION=-dev)"
      deployment_namespace:
        type: string
        default: ""
        required: false
        description: "Kubernetes namespace to deploy to. If empty, the namespace will be taken from the cluster credentials."
      concurrency_group:
        type: string
        required: false
        description: "The concurrency group to use for this workflow"
      concurrency_cancel_in_progress:
        type: boolean
        default: true
        required: false
        description: "Cancel all other runs of this workflow in progress when a new run is triggered"
    outputs:
      branch_name_lower:
        description: The name of the branch in lowercase
        value: ${{ jobs.docker_build.outputs.branch_name_lower }}

concurrency:
  group: ${{ inputs.concurrency_group || format('{0}-{1}-build_deploy-{2}-{3}', inputs.environment, github.workflow, github.head_ref || github.ref_name, inputs.app_name) }}
  cancel-in-progress: ${{ inputs.concurrency_cancel_in_progress }}

jobs:
  docker_build:
    name: Docker build
    runs-on: ubuntu-24.04
    outputs:
      branch_name_lower: ${{ steps.branch_name.outputs.branch_name_lower }}
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      issues: write
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ startsWith(github.event_name, 'pull_request') && github.event.pull_request.head.sha || '' }}

      - id: branch_name
        run: |
          RE='[^0-9A-Za-z-]+' # Allowed characters
          BRANCH_NAME_RAW="${{ github.head_ref || github.ref_name }}"
          BRANCH_NAME=$(echo "$BRANCH_NAME_RAW" | sed -E "s/$RE/-/g")
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "BRANCH_NAME_LOWER=${BRANCH_NAME,,}" >> $GITHUB_ENV
          echo "branch_name_lower=${BRANCH_NAME,,}" >> $GITHUB_OUTPUT

      - name: Convert custom environment variables
        run: |
          echo "${{ inputs.env_vars }}" | while IFS= read -r line; do
            echo "$line" | xargs >> $GITHUB_ENV
          done

      - name: Get cluster credentials
        id: cluster_creds
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          path: ${{ vars.VAULT_AUTH_PATH }}
          role: ${{ vars.VAULT_ROLE }}
          secrets: |
            ES/data/gke/${{ vars.CLUSTER_CREDENTIALS_NAME }} * ;
            SHARED/data/common artifact_registry_url | ARTIFACT_REGISTRY_URL ;
            SHARED/data/common artifact_registry_project | ARTIFACT_REGISTRY_PROJECT ;
            SHARED/data/common DATADOG_API_KEY | DATADOG_API_KEY ;
            ${{ vars.VAULT_SHORT }}/data/CI/${{ vars.CLUSTER_CREDENTIALS_NAME }} * | K8S_CLUSTER_ ;
            ${{ inputs.vault_secrets }}

      - name: "Set common variables"
        id: "common_variables"
        run: |
          # GITHUB ENV
          ## Variables to help the transistion
          echo "CIRCLE_PROJECT_REPONAME=${{ github.event.repository.name }}" >> $GITHUB_ENV # TODO: This is temporary. Delete it when possible.
          echo "CIRCLE_SHA1=${{ inputs.app_version }}" >> $GITHUB_ENV # TODO: This is temporary. Delete it when possible.
          echo "SHORT=${{ vars.VAULT_SHORT }}" >> $GITHUB_ENV # TODO: This is temporary. Delete it when possible.
          echo "CIRCLE_BRANCH=${{ github.head_ref || github.ref_name }}" >> $GITHUB_ENV # TODO: This is temporary. Delete it when possible.
          echo 'CIRCLE_USERNAME=${{ github.actor }}' >> $GITHUB_ENV # TODO: This is temporary. Delete it when possible.

          echo "CLUSTER_ENV=${{ inputs.environment }}" >> $GITHUB_ENV
          echo "VAULT_SHORT=${{ vars.VAULT_SHORT }}" >> $GITHUB_ENV
          echo "VAULT_ADDR=${{ vars.VAULT_ADDR }}" >> $GITHUB_ENV
          echo "VAULT_ROLE=${{ vars.VAULT_ROLE }}" >> $GITHUB_ENV

      - id: "auth"
        name: Auth GCloud
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_POOL_PROVIDER_NAME }}
          service_account: ${{ secrets.WORKLOAD_IDENTITY_SA_EMAIL }}

      - name: "Configure docker"
        run: "gcloud auth configure-docker ${{ steps.cluster_creds.outputs.ARTIFACT_REGISTRY_URL }}"

      - name: Prepare image string
        id: prepare_image_tag
        run: |
          image="${{ steps.cluster_creds.outputs.ARTIFACT_REGISTRY_URL }}/${{ steps.cluster_creds.outputs.ARTIFACT_REGISTRY_PROJECT }}/${{ vars.VAULT_SHORT }}-docker/${{ inputs.docker_image_name }}"
          echo "DOCKER_FRIENDLY_IMAGE_TAG=${image,,}" >> $GITHUB_OUTPUT

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ steps.prepare_image_tag.outputs.DOCKER_FRIENDLY_IMAGE_TAG }}
          tags: |
            type=raw,value=latest,enable=${{ inputs.docker_create_latest_tag }}
            type=raw,value=${{ inputs.app_version }},enable=true
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}
            type=schedule
            type=sha,format=long,prefix=

      - id: buildx
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Build and push
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        with:
          load: true
          tags: ${{ steps.meta.outputs.tags }} # TODO does this work still?
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ inputs.docker_file_path }}
          context: ${{ inputs.docker_context }}
          build-contexts: ${{ inputs.docker_build_contexts }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: ${{ inputs.docker_target }}
          secrets: ${{ inputs.docker_secrets }}
          secret-envs: ${{ inputs.docker_secret_envs }}
          build-args: ${{ inputs.docker_build_args }}
          secret-files: |
            "gcloud=${{ steps.auth.outputs.credentials_file_path }}"

      - id: date
        name: Get current date
        if: ${{ inputs.enable_vulnerability_scan == true }}
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - id: restore-cache
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        if: ${{ steps.date.outcome == 'success' }}
        with:
          path: ${{ github.workspace }}/.cache/trivy
          key: cache-trivy-${{ steps.date.outputs.date }}

      - name: Run Trivy vulnerability scanner
        id: trivy
        if: ${{ steps.date.outcome == 'success' }}
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # 0.30.0
        continue-on-error: true
        with:
          image-ref: "${{ steps.prepare_image_tag.outputs.DOCKER_FRIENDLY_IMAGE_TAG }}:${{ steps.meta.outputs.version }}"
          format: "json"
          output: "trivy-result.json"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"
        env:
          ACTIONS_RUNTIME_TOKEN: ${{ github.token }}
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: "Run Trivy vulnerability scanner - sarif"
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # 0.30.0
        if: ${{ steps.date.outcome == 'success' }}
        continue-on-error: true
        with:
          image-ref: "${{ steps.prepare_image_tag.outputs.DOCKER_FRIENDLY_IMAGE_TAG }}:${{ steps.meta.outputs.version }}"
          format: "sarif"
          output: "trivy-result.sarif"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"
          skip-setup-trivy: true
        env:
          ACTIONS_RUNTIME_TOKEN: ${{ github.token }}
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@b6a472f63d85b9c78a3ac5e89422239fc15e9b3c # v3.28.1
        if: ${{ steps.date.outcome == 'success' }}
        continue-on-error: true
        with:
          sarif_file: "trivy-result.sarif"

      - name: Convert json to markdown
        if: ${{ steps.date.outcome == 'success' }}
        run: |
          echo -e '# Trivy Report\n\n' > trivy-result.md

          if [ ! -f trivy-result.json ]; then
            echo "Failed to generate trivy-result.json, look at previous step(s) to investigate the issue."
            exit 1
          fi

          HAS_VULNERABILITIES=$(jq -r '.Results[] | select(has("Vulnerabilities"))' trivy-result.json)

          if [ -z "$HAS_VULNERABILITIES" ] || [ "$HAS_VULNERABILITIES" == "null" ]; then
            echo -e '✅ No vulnerabilities was found in your docker image' >> trivy-result.md
          else
            echo -e '❌ The following vulnerabilities was found in your docker image' >> trivy-result.md
            echo -e '| Type | Package | Vulnerability ID | Severity | Installed Version | Fixed Version |' >> trivy-result.md
            echo -e '| ------- | ---- | ---------------- | -------- | ----------------- | ------------- |' >> trivy-result.md
            echo $HAS_VULNERABILITIES | jq -r '. | "| \(.Type) | \(.Vulnerabilities[] | "\(.PkgName) | \(.VulnerabilityID) | \(.Severity) | \(.InstalledVersion) | \(.FixedVersion) |")"' >> trivy-result.md
          fi

      - name: Add Trivy Report to summary
        if: ${{ steps.date.outcome == 'success' }}
        run: cat trivy-result.md >> $GITHUB_STEP_SUMMARY

      - name: Find Comment
        if: ${{ startsWith(github.event_name, 'pull_request') && steps.date.outcome == 'success' }}
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e # v3.1.0
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "# Trivy Report"

      - name: Create comment
        if: ${{ steps.find-comment.outcome == 'success' }}
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: "replace"
          body-path: "trivy-result.md"

      - name: Checking if vulnerabilities was found
        if: ${{ steps.trivy.outcome == 'failure' }}
        run: |
          echo "Vulnerabilities was found"
          exit 1

      - name: push images
        if: ${{ inputs.deploy == true || inputs.docker_image_push == true }}
        run: docker push --all-tags ${{ steps.prepare_image_tag.outputs.DOCKER_FRIENDLY_IMAGE_TAG }}

      - name: Submit Datadog metrics
        if: success() || failure()
        continue-on-error: true
        run: |
          current_time=$(date +%s)

          curl -X POST -s "https://api.datadoghq.eu/api/v2/series" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ steps.cluster_creds.outputs.DATADOG_API_KEY }}" \
            -d @- << EOF
          {
            "series": [
              {
                "metric": "github.job.${{ job.status }}",
                "type": 1,
                "points": [
                  {
                    "timestamp": $current_time,
                    "value": 1
                  }
                ],
                "tags": ["job:docker_build","repository:${{ github.event.repository.name }}"]
              }
            ]
          }
          EOF

  deploy:
    name: Helm deploy
    if: ${{ inputs.deploy == true }}
    needs: docker_build
    uses: BESTSELLER/actions-helm/.github/workflows/deploy_helm.yaml@486f1483b106ac0fc67be65fb81e52aeeaeb3b65 # v0.6.1
    secrets: inherit
    permissions:
      contents: read
      id-token: write
    with:
      app_name: ${{ inputs.app_name }}
      app_version: ${{ inputs.app_version }}
      chart_path: ${{ inputs.chart_path }}
      chart_version: ${{ inputs.chart_version }}
      values_file_path: ${{ inputs.values_file_path }}
      remote_values_file_path: ${{ inputs.remote_values_file_path }}
      environment: ${{ inputs.environment }}
      vault_secrets: ${{ inputs.vault_secrets }}
      env_vars: ${{ inputs.env_vars }}
      deployment_namespace: ${{ inputs.deployment_namespace }}
      dry_run: ${{ !inputs.deploy }}
      concurrency_group: ${{ inputs.concurrency_group }}
      concurrency_cancel_in_progress: ${{ inputs.concurrency_cancel_in_progress }}
