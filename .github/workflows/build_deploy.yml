name: Test and Build Docker Image

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"
  pull_request: # TODO: Change to pull_request_target:
    branches:
      - master

concurrency:
  group: ${{ format('{0}-{1}', github.event.repository.name, github.head_ref || github.ref_name) }}
  cancel-in-progress: ${{ startsWith(github.event_name , 'pull_request')}}

jobs:
  test:
    name: Go test
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event_name , 'pull_request') && github.event.pull_request.head.repo.full_name == github.repository }}
    environment: prod
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Get vault secrets
        id: vault_secrets
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          path: ${{ vars.VAULT_AUTH_PATH }}
          role: ${{ vars.VAULT_ROLE }}
          secrets: |
            SHARED/data/common SONAR_ORG_GH | SONAR_ORG ;
            SHARED/data/common SONAR_LOGIN_GH | SONAR_TOKEN ;
            SHARED/data/common SONAR_KEY_GH | SONAR_KEY ;
            SHARED/data/common SONAR_HOST | SONAR_HOST ;
            SHARED/data/common DATADOG_API_KEY | DATADOG_API_KEY ;

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: "go.mod"

      - name: Install linters
        run: go install golang.org/x/lint/golint@latest

      - name: Go format and lint
        id: go_static_analysis
        run: |
          go fmt ./...
          golint ./...
          go vet ./...

      - name: Suggest changes
        if: always()
        uses: reviewdog/action-suggester@4747dbc9f9e37adba0943e681cc20db466642158 # v1.21.0
        with:
          tool_name: go static analysis

      - name: Test
        if: always()
        uses: robherley/go-test-action@b19f6aadabfb1ad85079065b21aa2af132466468 # v0.6.0

      - name: Cache SonarQube packages
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 #v4.2.3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarQube scan
        uses: SonarSource/sonarqube-scan-action@2500896589ef8f7247069a56136f8dc177c27ccf # v5.2.0
        with:
          args: >
            -Dsonar.host.url=${{ steps.vault_secrets.outputs.SONAR_HOST }}
            -Dsonar.token=${{ steps.vault_secrets.outputs.SONAR_TOKEN }}
            -Dsonar.organization=${{ steps.vault_secrets.outputs.SONAR_ORG }}
            -Dsonar.projectKey=${{ steps.vault_secrets.outputs.SONAR_KEY }}_${{ github.event.repository.name }}
            -Dsonar.projectName=${{ github.event.repository.name }}
            -Dsonar.links.scm="https://github.com/${{ github.repository }}"
            -Dsonar.scm.provider=git
            ${{ format('-Dsonar.pullrequest.branch={0} -Dsonar.pullrequest.key={1}', github.head_ref || github.ref_name, github.event.pull_request.number) }}

      - name: Submit Datadog metrics
        if: success() || failure()
        run: |
          current_time=$(date +%s)

          curl -X POST -s "https://api.datadoghq.eu/api/v2/series" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ steps.vault_secrets.outputs.DATADOG_API_KEY }}" \
            -d @- << EOF
          {
            "series": [
              {
                "metric": "github.job.${{ job.status }}",
                "type": 1,
                "points": [
                  {
                    "timestamp": $current_time,
                    "value": 1
                  }
                ],
                "tags": ["job:go_test","repository:${{ github.event.repository.name }}"]
              }
            ]
          }
          EOF

  build:
    name: Docker build
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        docker_file_path: ["", Dockerfile.ci]
    environment: prod
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ startsWith(github.event_name, 'pull_request') && github.event.pull_request.head.sha || '' }}

      - name: Get cluster credentials
        id: cluster_creds
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          path: ${{ vars.VAULT_AUTH_PATH }}
          role: ${{ vars.VAULT_ROLE }}
          secrets: |
            SHARED/data/common artifact_registry_url | ARTIFACT_REGISTRY_URL ;
            SHARED/data/common artifact_registry_project | ARTIFACT_REGISTRY_PROJECT ;
            SHARED/data/common DATADOG_API_KEY | DATADOG_API_KEY ;

      - id: "auth"
        name: Auth GCloud
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_POOL_PROVIDER_NAME }}
          service_account: ${{ secrets.WORKLOAD_IDENTITY_SA_EMAIL }}

      - name: "Configure docker"
        run: "gcloud auth configure-docker ${{ steps.cluster_creds.outputs.ARTIFACT_REGISTRY_URL }}"

      - name: Prepare image string
        id: prepare_image_tag
        run: |
          image="${{ steps.cluster_creds.outputs.ARTIFACT_REGISTRY_URL }}/${{ steps.cluster_creds.outputs.ARTIFACT_REGISTRY_PROJECT }}/${{ vars.VAULT_SHORT }}-docker/${{ github.event.repository.name }}"
          echo "DOCKER_FRIENDLY_IMAGE_TAG=${image,,}" >> $GITHUB_OUTPUT

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ steps.prepare_image_tag.outputs.DOCKER_FRIENDLY_IMAGE_TAG }}
          tags: |
            type=raw,value=latest,enable=${{ github.event_name == 'push' }}
            type=raw,value=${{ github.sha }},enable=true
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}
            type=schedule
            type=sha,format=long,prefix=

      - id: buildx
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Build and push
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        with:
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ matrix.docker_file_path }}
          cache-from: type=gha
          cache-to: type=gha,mode=max}
          secret-files: |
            "gcloud=${{ steps.auth.outputs.credentials_file_path }}"

      - name: Push images
        if: ${{ github.event_name == 'push' }}
        run: docker push --all-tags ${{ steps.prepare_image_tag.outputs.DOCKER_FRIENDLY_IMAGE_TAG }}

      - name: Submit Datadog metrics
        if: success() || failure()
        continue-on-error: true
        run: |
          current_time=$(date +%s)

          curl -X POST -s "https://api.datadoghq.eu/api/v2/series" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ steps.cluster_creds.outputs.DATADOG_API_KEY }}" \
            -d @- << EOF
          {
            "series": [
              {
                "metric": "github.job.${{ job.status }}",
                "type": 1,
                "points": [
                  {
                    "timestamp": $current_time,
                    "value": 1
                  }
                ],
                "tags": ["job:docker_build","repository:${{ github.event.repository.name }}"]
              }
            ]
          }
          EOF
