name: Build and Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"
  pull_request: # TODO: Change to pull_request_target:
    branches:
      - master

concurrency:
  group: ${{ format('{0}-build_deploy-{1}', github.event.repository.name, github.head_ref || github.ref_name) }}
  cancel-in-progress: ${{ startsWith(github.event_name, 'pull_request') }}

jobs:
  test:
    name: Go test
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ startsWith(github.event_name, 'pull_request') && github.event.pull_request.head.sha || '' }}

      - name: Get vault secrets
        id: vault_secrets
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          path: ${{ vars.VAULT_AUTH_PATH }}
          role: ${{ vars.VAULT_ROLE }}
          secrets: |
            SHARED/data/common SONAR_ORG_GH | SONAR_ORG ;
            SHARED/data/common SONAR_LOGIN_GH | SONAR_TOKEN ;
            SHARED/data/common SONAR_KEY_GH | SONAR_KEY ;
            SHARED/data/common SONAR_HOST | SONAR_HOST ;
            SHARED/data/common DATADOG_API_KEY | DATADOG_API_KEY ;

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: "go.mod"

      - name: Install linters
        run: go install golang.org/x/lint/golint@latest

      - name: Go fmt and lint
        id: go_static_analysis
        run: |
          go fmt ./...
          golint ./...
          go vet ./...

      - name: Suggest changes
        if: always()
        uses: reviewdog/action-suggester@4747dbc9f9e37adba0943e681cc20db466642158 # v1.21.0
        with:
          tool_name: go static analysis

      - name: Test
        if: always()
        uses: robherley/go-test-action@b19f6aadabfb1ad85079065b21aa2af132466468 # v0.6.0

      - name: Cache SonarQube packages
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 #v4.2.3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Enable SonarCloud project
        env:
          SONAR_TOKEN: ${{ steps.vault_secrets.outputs.SONAR_TOKEN }}
          SONAR_ORG: ${{ steps.vault_secrets.outputs.SONAR_ORG }}
          SONAR_KEY: ${{ steps.vault_secrets.outputs.SONAR_KEY }}
          SONAR_PROJECT: ${{ github.event.repository.name }}
        run: |
          VALID_TOKEN=$(curl --request GET -s --url 'https://sonarcloud.io/api/authentication/validate' --user "$SONAR_TOKEN:" | jq -r '.valid')
          if [ "$VALID_TOKEN" == "false" ]; then
            echo "Token is not valid."
            exit 1
          fi

          ALL_REPOS=$(curl --request GET -s --url 'https://sonarcloud.io/api/alm_integration/list_repositories?organization='"$SONAR_ORG" --user "$SONAR_TOKEN:")
          THIS_REPO=$(echo "$ALL_REPOS" | jq '.repositories[] | select(.label == "'"$SONAR_PROJECT"'")')
          IS_LINKED=$(echo "$THIS_REPO" | jq -r '.linkedProjects | length')

          if test "$IS_LINKED" -eq 0; then
            echo "Repository is not linked to SonarCloud. Will link it now."
            installationKey=$(echo "$THIS_REPO" | jq -r '.installationKey')

            # Link the project to SonarCloud
            curl --request POST -s \
              --url https://sonarcloud.io/api/alm_integration/provision_projects \
              --user "$SONAR_TOKEN:" \
              --data 'installationKeys='"$installationKey" \
              --data 'organization='"$SONAR_ORG"

            # Disable SonarCloud Automatic Analysis
            curl --request POST -s \
              --url https://sonarcloud.io/api/autoscan/activation \
              --user "$SONAR_TOKEN:" \
              --data 'enable=false' \
              --data 'projectKey='"$SONAR_KEY"'_'"$SONAR_PROJECT"
          else
            echo "Repository is already linked to SonarCloud. Will not link it again."
          fi

      - name: SonarQube scan
        uses: SonarSource/sonarqube-scan-action@2500896589ef8f7247069a56136f8dc177c27ccf # v5.2.0
        with:
          args: >
            -Dsonar.host.url=${{ steps.vault_secrets.outputs.SONAR_HOST }}
            -Dsonar.token=${{ steps.vault_secrets.outputs.SONAR_TOKEN }}
            -Dsonar.organization=${{ steps.vault_secrets.outputs.SONAR_ORG }}
            -Dsonar.projectKey=${{ steps.vault_secrets.outputs.SONAR_KEY }}_${{ github.event.repository.name }}
            -Dsonar.projectName=${{ github.event.repository.name }}
            -Dsonar.links.scm="https://github.com/${{ github.repository }}"
            -Dsonar.scm.provider=git
            ${{ startsWith(github.event_name, 'pull_request') && format('-Dsonar.pullrequest.branch={0} -Dsonar.pullrequest.key={1}', github.head_ref || github.ref_name, github.event.pull_request.number) || format('-Dsonar.branch.name={0}', github.head_ref || github.ref_name) }}

      - name: Submit Datadog metrics
        if: success() || failure()
        run: |
          current_time=$(date +%s)

          curl -X POST -s "https://api.datadoghq.eu/api/v2/series" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ steps.vault_secrets.outputs.DATADOG_API_KEY }}" \
            -d @- << EOF
          {
            "series": [
              {
                "metric": "github.job.${{ job.status }}",
                "type": 1,
                "points": [
                  {
                    "timestamp": $current_time,
                    "value": 1
                  }
                ],
                "tags": ["job:go_test","repository:${{ github.event.repository.name }}"]
              }
            ]
          }
          EOF

  build-go:
    name: Build Go binaries
    if: (!startsWith(github.event_name, 'pull_request')) || github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: "1.24.1"

      - name: Build for Windows/amd64
        run: |
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o harpocrates.exe
          tar -czvf harpocrates_${{ github.ref_name }}_windows_amd64.tar.gz harpocrates.exe
          rm harpocrates.exe

      - name: Build for Darwin/amd64
        run: |
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o harpocrates
          tar -czvf harpocrates_${{ github.ref_name }}_darwin_amd64.tar.gz harpocrates
          rm harpocrates

      - name: Build for Linux/amd64
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o harpocrates
          tar -czvf harpocrates_${{ github.ref_name }}_linux_amd64.tar.gz harpocrates

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: binaries
          if-no-files-found: error
          path: |
            harpocrates_*
            harpocrates

  build-deploy:
    name: Docker build
    runs-on: ubuntu-24.04
    needs: build-go
    strategy:
      matrix:
        docker_file_path: ["", Dockerfile.ci]
    environment: prod
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      issues: write
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ startsWith(github.event_name, 'pull_request') && github.event.pull_request.head.sha || '' }}

      - name: Get cluster credentials
        id: cluster_creds
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          path: ${{ vars.VAULT_AUTH_PATH }}
          role: ${{ vars.VAULT_ROLE }}
          secrets: |
            ES/data/gke/${{ vars.CLUSTER_CREDENTIALS_NAME }} * ;
            SHARED/data/common artifact_registry_url | ARTIFACT_REGISTRY_URL ;
            SHARED/data/common artifact_registry_project | ARTIFACT_REGISTRY_PROJECT ;
            SHARED/data/common DATADOG_API_KEY | DATADOG_API_KEY ;

      - id: "auth"
        name: Auth GCloud
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_POOL_PROVIDER_NAME }}
          service_account: ${{ secrets.WORKLOAD_IDENTITY_SA_EMAIL }}

      - name: "Configure docker"
        run: "gcloud auth configure-docker ${{ steps.cluster_creds.outputs.ARTIFACT_REGISTRY_URL }}"

      - name: Prepare image string
        id: prepare_image_tag
        run: |
          image="${{ steps.cluster_creds.outputs.ARTIFACT_REGISTRY_URL }}/${{ steps.cluster_creds.outputs.ARTIFACT_REGISTRY_PROJECT }}/${{ vars.VAULT_SHORT }}-docker/${{ github.event.repository.name }}"
          echo "DOCKER_FRIENDLY_IMAGE_TAG=${image,,}" >> $GITHUB_OUTPUT

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ steps.prepare_image_tag.outputs.DOCKER_FRIENDLY_IMAGE_TAG }}
          tags: |
            type=raw,value=latest,enable=${{ github.event_name == 'push' }}
            type=raw,value=${{ github.sha }},enable=true
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}
            type=schedule
            type=sha,format=long,prefix=

      - id: buildx
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Build and push
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        with:
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ matrix.docker_file_path }}
          cache-from: type=gha
          cache-to: type=gha,mode=max}
          secret-files: |
            "gcloud=${{ steps.auth.outputs.credentials_file_path }}"

      - id: date
        name: Get current date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - id: restore-cache
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        if: ${{ steps.date.outcome == 'success' }}
        with:
          path: ${{ github.workspace }}/.cache/trivy
          key: cache-trivy-${{ steps.date.outputs.date }}

      - name: Run Trivy vulnerability scanner
        id: trivy
        if: ${{ steps.date.outcome == 'success' }}
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # 0.30.0
        continue-on-error: true
        with:
          image-ref: "${{ steps.prepare_image_tag.outputs.DOCKER_FRIENDLY_IMAGE_TAG }}:${{ steps.meta.outputs.version }}"
          format: "json"
          output: "trivy-result.json"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"
        env:
          ACTIONS_RUNTIME_TOKEN: ${{ github.token }}
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: "Run Trivy vulnerability scanner - sarif"
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # 0.30.0
        if: ${{ steps.date.outcome == 'success' }}
        continue-on-error: true
        with:
          image-ref: "${{ steps.prepare_image_tag.outputs.DOCKER_FRIENDLY_IMAGE_TAG }}:${{ steps.meta.outputs.version }}"
          format: "sarif"
          output: "trivy-result.sarif"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"
          skip-setup-trivy: true
        env:
          ACTIONS_RUNTIME_TOKEN: ${{ github.token }}
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@b6a472f63d85b9c78a3ac5e89422239fc15e9b3c # v3.28.1
        if: ${{ steps.date.outcome == 'success' }}
        continue-on-error: true
        with:
          sarif_file: "trivy-result.sarif"

      - name: Convert json to markdown
        if: ${{ steps.date.outcome == 'success' }}
        run: |
          echo -e '# Trivy Report\n\n' > trivy-result.md

          if [ ! -f trivy-result.json ]; then
            echo "Failed to generate trivy-result.json, look at previous step(s) to investigate the issue."
            exit 1
          fi

          HAS_VULNERABILITIES=$(jq -r '.Results[] | select(has("Vulnerabilities"))' trivy-result.json)

          if [ -z "$HAS_VULNERABILITIES" ] || [ "$HAS_VULNERABILITIES" == "null" ]; then
            echo -e '✅ No vulnerabilities was found in your docker image' >> trivy-result.md
          else
            echo -e '❌ The following vulnerabilities was found in your docker image' >> trivy-result.md
            echo -e '| Type | Package | Vulnerability ID | Severity | Installed Version | Fixed Version |' >> trivy-result.md
            echo -e '| ------- | ---- | ---------------- | -------- | ----------------- | ------------- |' >> trivy-result.md
            echo $HAS_VULNERABILITIES | jq -r '. | "| \(.Type) | \(.Vulnerabilities[] | "\(.PkgName) | \(.VulnerabilityID) | \(.Severity) | \(.InstalledVersion) | \(.FixedVersion) |")"' >> trivy-result.md
          fi

      - name: Add Trivy Report to summary
        if: ${{ steps.date.outcome == 'success' }}
        run: cat trivy-result.md >> $GITHUB_STEP_SUMMARY

      - name: Find Comment
        if: ${{ startsWith(github.event_name, 'pull_request') && steps.date.outcome == 'success' }}
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e # v3.1.0
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "# Trivy Report"

      - name: Create comment
        if: ${{ steps.find-comment.outcome == 'success' }}
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: "replace"
          body-path: "trivy-result.md"

      - name: Checking if vulnerabilities was found
        if: ${{ steps.trivy.outcome == 'failure' }}
        run: |
          echo "Vulnerabilities was found"
          exit 1

      - name: push images
        if: ${{ github.event_name == 'push' }}
        run: docker push --all-tags ${{ steps.prepare_image_tag.outputs.DOCKER_FRIENDLY_IMAGE_TAG }}

      - name: Submit Datadog metrics
        if: success() || failure()
        continue-on-error: true
        run: |
          current_time=$(date +%s)

          curl -X POST -s "https://api.datadoghq.eu/api/v2/series" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ steps.cluster_creds.outputs.DATADOG_API_KEY }}" \
            -d @- << EOF
          {
            "series": [
              {
                "metric": "github.job.${{ job.status }}",
                "type": 1,
                "points": [
                  {
                    "timestamp": $current_time,
                    "value": 1
                  }
                ],
                "tags": ["job:docker_build","repository:${{ github.event.repository.name }}"]
              }
            ]
          }
          EOF

  publish:
    name: Publish release
    if: ${{ github.event_name == 'push' }}
    needs: build-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: binaries
          path: releases/

      - name: Get vault secrets
        id: vault_secrets
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          path: ${{ vars.VAULT_AUTH_PATH }}
          role: ${{ vars.VAULT_ROLE }}
          secrets: |
            ${{ vars.VAULT_SHORT }}/data/${{ github.event.repository.name }} GITHUB_TOKEN

      - name: Update templates with git tag
        run: |
          mkdir -p releases
          sed -i -e "s?\$HARPOCRATES_VERSION?${{ github.ref_name }}?g" orb/orb.yml
          sed -i -e "s?\$HARPOCRATES_VERSION?${{ github.ref_name }}?g" orb/CronJob.yml
          sed -i -e "s?\$HARPOCRATES_VERSION?${{ github.ref_name }}?g" orb/CronJob-sidecar.yml
          sed -i -e "s?\$HARPOCRATES_VERSION?${{ github.ref_name }}?g" orb/Deployment.yml
          sed -i -e "s?\$HARPOCRATES_VERSION?${{ github.ref_name }}?g" orb/Deployment-sidecar.yml
          sed -i -e "s?\$HARPOCRATES_VERSION?${{ github.ref_name }}?g" orb/StatefulSet.yml
          sed -i -e "s?\$HARPOCRATES_VERSION?${{ github.ref_name }}?g" orb/StatefulSet-sidecar.yml
          cp orb/CronJob.yml ./releases
          cp orb/CronJob-sidecar.yml ./releases
          cp orb/Deployment.yml ./releases
          cp orb/Deployment-sidecar.yml ./releases
          cp orb/StatefulSet.yml ./releases
          cp orb/StatefulSet-sidecar.yml ./releases
          cp orb/kustomization.yml ./releases

      - name: Create GitHub release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
        with:
          files: releases/*
          tag_name: ${{ github.ref_name }}
          token: ${{ steps.vault_secrets.outputs.GITHUB_TOKEN }}
